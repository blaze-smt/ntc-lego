@page "/login"
@using NTC_Lego.Shared
@using Newtonsoft.Json
@inject HttpClient Http

<h3>Login</h3>

@if (isAuthenticated)
{
    <h3>Welcome, @userObj.UserName!</h3>
}
else
{
    <EditForm Model="userForm" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        @if(errorMessage != null)
        {
            <div class="alert alert-danger">@errorMessage</div>
        }
        <div class="form-group">
            <label for="email">Email</label>
            <InputText id="email" @bind-Value="userForm.Email" class="form-control"></InputText>
        </div>
        <div class="form-group">
            <label for="password">Password</label>
            <InputText id="password" @bind-Value="userForm.Password" class="form-control" type="password"></InputText>
        </div>
        <button type="submit" class="btn btn-primary">Login</button>
        <ValidationSummary></ValidationSummary>
    </EditForm>
}

@code {
    bool isAuthenticated = false;
    private UserLogin userForm = new UserLogin();
    private User? userObj = null;
    private string? errorMessage = null;

    private async void HandleLogin()
    {
        HttpResponseMessage loginResponse = await Http.PostAsJsonAsync($"/account/login?", userForm);

        if (loginResponse.StatusCode == System.Net.HttpStatusCode.OK)
        {
            UserTokenVM? vm = JsonConvert.DeserializeObject<UserTokenVM>(await loginResponse.Content.ReadAsStringAsync());
            userObj = vm.User;
            Console.WriteLine(vm.Token);

            //TODO: Create VM with both userObj and JWT
            // Both objects will be returned here and put into a "UserService.cs"
            // When API is called and requires authentication, take JWT form UserService and pass with request

            isAuthenticated = true;
            Console.WriteLine($"{userForm.Email} // {userForm.Password}");
        }
        else 
        {
            this.errorMessage = "Email or Password is incorrect. Please try again!!";
        }

        StateHasChanged();
    }
}