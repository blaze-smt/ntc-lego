@page "/inventory"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject CurrentPage currentPage
@using NTC_Lego.Shared;

@attribute [Authorize(Roles = "Admin")]
<PageTitle>Inventory</PageTitle>

<div class="container">
    <!-- Create Button -->
    <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#add-modal">
        Add
    </button>

    <!-- Create Modal -->
    <div class="modal fade" id="add-modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="staticBackdropLabel">Add Inventory</h5>
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
                </div>
                <div class="modal-body">
                       <EditForm Model="inventoryAdd" OnValidSubmit="HandleInventoryAdd" class="w-100">
                        <DataAnnotationsValidator></DataAnnotationsValidator>
                        @if (errorMessage != null)
                        {
                            <div class="alert alert-danger">@errorMessage</div>
                        }
                        <div class="form-group">
                            <label class="required form-label fw-bold" for="itemId">Item</label>
                            <InputText id="itemId" Value="@inventoryAdd.ItemId" ValueChanged="HandleItemChange" ValueExpression="() => inventoryAdd.ItemId" class="form-control"></InputText>
                            <ValidationMessage For="@(() => inventoryAdd.ItemId)" />
                        </div>
                        @if (!hideRest) 
                        {
                            @if (colors == null)
                            {
                                <span>Colors loading...</span>
                            }
                            else 
                            {
                                <div class="form-group">
                                    <label class="required form-label fw-bold" for="colorId">Color</label>
                                    <InputSelect id="colorId" @bind-Value="inventoryAdd.ColorId" class="form-control">
                                        @foreach (var c in colors)
                                        {
                                            <option value="@c.ColorId">@c.ColorName</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => inventoryAdd.ColorId)" />
                                </div>
                            }
                        
                            @if (locations == null)
                            {
                                <span>Locations loading...</span>
                            }
                            else 
                            {
                                <div class="form-group">
                                    <label class="required form-label fw-bold" for="binName">Bin (Warehouse)</label>
                                    <InputSelect id="binName" @bind-Value="inventoryAdd.LocationId" class="form-control">
                                        @foreach (var l in locations)
                                        {
                                            <option value="@l.LocationId">@l.BinName (@l.Warehouse.WarehouseName)</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => inventoryAdd.LocationId)" />
                                </div>
                            }
                            <div class="form-group">
                                <label class="required form-label fw-bold" for="inventoryItemPrice">Price</label>
                                <InputNumber id="inventoryItemPrice" @bind-Value="inventoryAdd.InventoryItemPrice" class="form-control"></InputNumber>
                                <ValidationMessage For="@(() => inventoryAdd.InventoryItemPrice)" />
                            </div>
                            <div class="form-group">
                                <label class="required form-label fw-bold" for="itemQuantity">Quantity</label>
                                <InputNumber id="itemQuantity" @bind-Value="inventoryAdd.ItemQuantity" class="form-control"></InputNumber>
                                <ValidationMessage For="@(() => inventoryAdd.ItemQuantity)" />
                            </div>
                            <div class="mt-2 form-group">
                                <button type="submit" class="w-100 btn btn-primary" data-bs-dismiss="modal" disabled="@(!context.Validate())">Add</button>
                            </div>
                        }
                    </EditForm>
                </div>
            </div>
        </div>
    </div>

<div class="table-container">
@if (inventories == null)
{
    <span>Inventory loading...</span>
}
else
{
    <!-- Data Table -->
        <table class="table table-striped border">
            <thead class="table-dark">
                <tr class="text-center">
                    <th scope="col">ID</th>
                    <th scope="col">Total Quantity</th>
                    <th scope="col">Price</th>
                    <th scope="col">Item</th>
                    <th scope="col">Color</th>
                    <th scope="col"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var inventory in inventories)
                {
                    <tr class="text-center">
                        <td>@inventory.InventoryId</td>
                        <td>@inventory.QuantityTotal</td>
                        <td>@inventory.InventoryItemPrice</td>
                        <td>@inventory.ItemId</td>
                        <td>@inventory.Color.ColorName</td>
                        <td><button type="button" class="btn btn-info" aria-expanded="false" data-bs-toggle="collapse" data-bs-target="#more@(inventory.InventoryId)" aria-controls="more@(inventory.InventoryId)">Locations</button></td>
                    </tr>

                    <tr id="more@(inventory.InventoryId)" class="collapse">
                        <td colspan="6">
                            <table class="table table-sm table-secondary table-striped border">
                                <thead>
                                    <tr class="text-center">
                                        <th scope="col">Quantity</th>
                                        <th scope="col">Warehouse</th>
                                        <th scope="col">Bin Name</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var inventorylocation in inventory.InventoryLocations)
                                    {
                                    <tr class="text-center">
                                        <td>@inventorylocation.ItemQuantity</td>
                                        <td>@inventorylocation.Location.Warehouse.WarehouseName</td>
                                        <td>@inventorylocation.Location.BinName</td>
                                    </tr>
                                    }
                                </tbody>
                            </table>
                        </td>
                    </tr>

                }
            </tbody>
        </table>
    <!-- Table Pagination -->
        <div class="pagination-container">
        <input type="button" class="btn-lg btn" id="prev" @onclick="PrevPage" value="«" />
        @for (int i = curPage - 2; i <= curPage + 2; i++)
        {
            int j = i;
            @if (i > 0)
            {
                if (i == curPage)
                {
                    <span class="px-2" style="font-weight:bold; cursor:pointer" @onclick="() => ShowPage(j)">@i</span>
                }
                else
                {
                    <span class="px-2" style="cursor:pointer" @onclick="() => ShowPage(j)">@i</span>
                }
            }
        }
        <input type="button" class="btn-lg btn" id="next" @onclick="NextPage" value="»" />
    </div>
    }
    </div>
</div>

@code {
    private IEnumerable<ColorVM>? colors;
    private IEnumerable<LocationVM>? locations;
    private IEnumerable<InventoryVM>? inventories;
    private int pageSize = 15;
    private int curPage = 1;

    protected override async Task OnInitializedAsync()
    {
        await ShowPage();
    }

    protected async Task NextPage()
    {
        curPage++;
        await ShowPage();
    }

    protected async Task ShowPage(int page)
    {
        curPage = page;
        await ShowPage();
    }

    protected async Task PrevPage()
    {
        if (curPage > 1)
        {
            curPage--;
            await ShowPage();
        }
    }

    protected async Task ShowPage()
    {
        inventories = await Http.GetFromJsonAsync<List<InventoryVM>>($"/Admin/inventory?page={curPage}");
        locations = await Http.GetFromJsonAsync<List<LocationVM>>($"/Admin/location?");
        ItemVM item = await Http.GetFromJsonAsync<ItemVM>($"/Admin/item?itemId={inventoryAdd.ItemId}");
        colors = await Http.GetFromJsonAsync<List<ColorVM>>($"/item/itemcolors?itemId={item.ItemId}&&itemType={item.ItemTypeId}");
    }

    protected override void OnInitialized()
    {
        currentPage.SetCurrentPageName("Inventory");
        base.OnInitialized();
    }

    void ChangeName() => currentPage.SetCurrentPageName("Name changed");

    // Inventory Add transaction
    private string? errorMessage = null;
    private InventoryAddVM inventoryAdd = new InventoryAddVM();
    private bool hideRest = false;

    private async Task HandleInventoryAdd()
    {
        HttpResponseMessage response = await Http.PostAsJsonAsync($"/admin/addinventory?", inventoryAdd);
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            StateHasChanged();
            await OnInitializedAsync();
        }
    }

    private async Task HandleItemChange(string id)
    {
        inventoryAdd.ItemId = id;
        try
        {
            ItemVM item = await Http.GetFromJsonAsync<ItemVM>($"/Admin/item?itemId={id}");
            if (item != null)
            {
                colors = await Http.GetFromJsonAsync<List<ColorVM>>($"/item/itemcolors?itemId={item.ItemId}&&itemType={item.ItemTypeId}");
                this.errorMessage = null;
                this.hideRest = false;
            }
        }
        catch (HttpRequestException ex)
        {
            colors = null;
            this.errorMessage = "Invalid item id. Please try again!!";
            this.hideRest = true;
        }
        StateHasChanged();
    }
}
