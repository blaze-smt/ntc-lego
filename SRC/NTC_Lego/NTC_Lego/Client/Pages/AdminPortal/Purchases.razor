@page "/purchases"
@using NTC_Lego.Shared
@using Newtonsoft.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject CurrentPage currentPage
@inject IJSRuntime JsRuntime

@attribute [Authorize(Roles = "Admin")]
<PageTitle>Purchase Orders</PageTitle>

<div class="container">
    <!-- Create Button -->
    <a class="btn btn-success" href="/addpurchase">Add</a>

    <!-- Delete Button -->
    <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#delete-modal">
        Cancel
    </button>

    <!-- Delete Modal -->
    <div class="modal fade" id="delete-modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="staticBackdropLabel">Delete purchase</h5>
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
                </div>
                <div class="modal-body">
                    @if (!selected)
                    {
                        <p>Please select an purchase order entry...</p>
                    }
                    else 
                    {
                        @if (canCancel && !alreadyCanceled)
                        {
                            <EditForm Model="purchaseOrderCancel" OnValidSubmit="HandlePurchaseCancel" class="w-100">
                                <DataAnnotationsValidator></DataAnnotationsValidator>
                                <div class="form-group">
                                    <label class="required form-label fw-bold" for="purchaseId">ID</label>
                                    <input id="purchaseId" Value="@purchaseOrderCancel.PurchaseOrderId" class="form-control" disabled />
                                </div>
                                <div class="form-group">
                                    <label class="required form-label fw-bold" for="purchaseDate">Date</label>
                                    <input id="purchaseDate" Value="@purchaseOrderCancel.PurchaseOrderDate" class="form-control" disabled />
                                </div>
                                <div class="form-group">
                                    <label class="required form-label fw-bold" for="purchaseStatus">Status</label>
                                    <input id="purchaseStatus" Value="@purchaseOrderCancel.OrderStatus" class="form-control" disabled />
                                </div>
                                <div class="form-group">
                                    <label class="required form-label fw-bold" for="purchaseSupplier">Supplier</label>
                                    <input id="purchaseSupplier" Value="@purchaseOrderCancel.Supplier.SupplierName" class="form-control" disabled />
                                </div>
                                <div class="form-group">
                                    <label class="required form-label fw-bold" for="purchaseTotal">Total</label>
                                    <input id="purchaseTotal" Value="@purchaseOrderCancel.PurchaseOrderTotalPrice" class="form-control" disabled />
                                </div>
                                <div class="mt-2 form-group">
                                    <button type="submit" class="w-100 btn btn-primary" data-bs-dismiss="modal">Confirm Cancel</button>
                                </div>
                            </EditForm>
                        }
                        else if (alreadyCanceled)
                        {
                            <p>This purchase order has already been canceled...</p>
                        }
                        else 
                        {
                            <p>Selected purchase order date exceeds 30 day return limit...</p>
                        }
                    }
                </div>
            </div>
        </div>
    </div>

<div class="table-container">
<!-- Purchase Order table -->
@if (purchaseOrders == null)
{
        <span>Purchase Orders loading...</span>
}
else
{
        <!-- Data Table -->
        <table class="table table-striped border">
            <thead class="table-dark">
            <tr class="text-center">
                    <th scope="col">Select</th>
                    <th scope="col">ID</th>
                    <th scope="col">Total</th>
                    <th scope="col">Date</th>
                    <th scope="col">Status</th>
                    <th scope="col">Supplier</th>
                </tr>
            </thead>

            <tbody>
            @foreach (var purchase in purchaseOrders)
            {
                <tr class="text-center">
                    <td>
                        <input type="radio" value='@purchase.PurchaseOrderId' name="purchase-select" @onchange="HandleSelect"/>
                    </td>
                    <td>@purchase.PurchaseOrderId</td>
                    <td>@purchase.PurchaseOrderTotalPrice</td> 
                    <td>@purchase.PurchaseOrderDate</td>
                    <td>@purchase.OrderStatus</td>
                    <td>@purchase.Supplier.SupplierName</td>
                </tr>
            }
            </tbody>
        </table>
        <!-- Table Pagination -->
        <div class="pagination-container">
            <input type="button" class="btn-lg btn" id="prev" @onclick="PrevPage" value="«" />
                    @for (int i = curPage - 2; i <= curPage + 2; i++)
                    {
                        int j = i;
                        @if (i > 0)
                        {
                            if (i == curPage)
                            {
                                <span class="px-2" style="font-weight:bold; cursor:pointer" @onclick="() => ShowPage(j)">@i</span>
                            }
                            else
                            {
                                <span class="px-2" style="cursor:pointer" @onclick="() => ShowPage(j)">@i</span>
                            }
                        }
                    }
            <input type="button" class="btn-lg btn" id="next" @onclick="NextPage" value="»" />
        </div>
    }
    </div>
</div>

@code {
    private IEnumerable<PurchaseOrderVM>? purchaseOrders;
    private int pageSize = 15;
    private int curPage = 1;

    protected override async Task OnInitializedAsync()
    {
        await ShowPage();
    }

    protected async Task NextPage()
    {
        curPage++;
        await ShowPage();
    }

    protected async Task ShowPage(int page)
    {
        curPage = page;
        await ShowPage();
    }

    protected async Task PrevPage()
    {
        if (curPage > 1)
        {
            curPage--;
            await ShowPage();
        }
    }

    protected async Task ShowPage()
    {
        purchaseOrders = await Http.GetFromJsonAsync<List<PurchaseOrderVM>>($"/Purchase/purchases?page={curPage}");
    }

    protected override void OnInitialized()
    {
        currentPage.SetCurrentPageName("Purchases");
        base.OnInitialized();
    }

    void ChangeName() => currentPage.SetCurrentPageName("Name changed");

    /*  ==================================
     *      Purchase Order Transactions
        ================================== */
    private bool selected = false;
    private bool canCancel = false;
    private bool alreadyCanceled = false;
    private PurchaseOrderVM purchaseOrderCancel = new PurchaseOrderVM();

    private async void HandleSelect(ChangeEventArgs args)
    {
        alreadyCanceled = false;
        canCancel = false;
        var id = Int32.Parse(args.Value.ToString());
        PurchaseOrderVM purchaseOrder = await Http.GetFromJsonAsync<PurchaseOrderVM>($"/Purchase/purchase-id?id={id}");
        if (purchaseOrder != null)
        {
            if (purchaseOrder.OrderStatus == OrderStatus.Canceled)
            {
                selected = true;
                alreadyCanceled = true;
            }
            else 
            {
                selected = true;
                purchaseOrderCancel = purchaseOrder;

                DateTime orderDate = purchaseOrderCancel.PurchaseOrderDate;
                orderDate = orderDate.AddDays(30);
                if (orderDate > DateTime.Now)
                {
                    canCancel = true;
                }
            }
            StateHasChanged();
        }
    }

    private async Task HandlePurchaseCancel()
    {
        HttpResponseMessage response = await Http.PostAsJsonAsync($"/Purchase/purchase-cancel?", purchaseOrderCancel.PurchaseOrderId);
        var messageContent = await response.Content.ReadAsStringAsync();
        var messageList = JsonConvert.DeserializeObject<List<string>>(messageContent);
        var message = string.Join("\n",messageList);

        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            StateHasChanged();
            await JsRuntime.InvokeVoidAsync("alert", message);
            await OnInitializedAsync();
        }
        else 
        {
            await JsRuntime.InvokeVoidAsync("alert", message);
        }
    }
}