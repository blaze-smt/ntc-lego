@page "/purchases"
@using NTC_Lego.Shared
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject CurrentPage currentPage

@attribute [Authorize]
<PageTitle>Purchase Orders</PageTitle>

<div class="container">
    <!-- Create Button -->
    <button type="button" class="btn btn-success" data-bs-toggle="modal" data-bs-target="#add-modal">
        Add
    </button>

    <!-- Create Modal -->
    <div class="modal fade" id="add-modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="staticBackdropLabel">Add purchase</h5>
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
                </div>
                <div class="modal-body">
                    <form class="add-form">
                        <div class="add-input">
                            <div class="add-name-id">
                                <input type="text" id="id" name="id" placeholder="Product ID" />
                                <p>Or</p>
                                <input type="text" id="name" name="name" placeholder="Product name" />
                            </div>
                            <div class="add-amount">
                                <label for="amount">Product amount: </label>
                                <input type="number" id="amount" name="amount" />
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="submit" class="btn btn-primary">Confirm</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Button -->
    <button type="button" class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#delete-modal">
        Cancel
    </button>

    <!-- Delete Modal -->
    <div class="modal fade" id="delete-modal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="staticBackdropLabel">Delete purchase</h5>
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Close</button>
                </div>
                <div class="modal-body">
                    <form class="delete-form">
                        <div class="delete-buttons">
                            <button type="button" class="btn btn-light" data-bs-dismiss="modal">Cancel</button>
                            <p>Or</p>
                            <button class="btn btn-danger" type="submit" id="cancel" name="cancel">Delete</button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

<div class="table-container">
<!-- Purchase Order table -->
@if (purchaseOrders == null)
{
        <span>Purchase Orders loading...</span>
}
else
{
        <!-- Data Table -->
        <table class="table table-striped border">
            <thead class="table-dark">
            <tr class="text-center">
                    <th scope="col">Select</th>
                    <th scope="col">ID</th>
                    <th scope="col">Total</th>
                    <th scope="col">Date</th>
                    <th scope="col">Status</th>
                    <th scope="col">Supplier</th>
                </tr>
            </thead>

            <tbody>
            @foreach (var purchase in purchaseOrders)
            {
                <tr class="text-center">
                    <td>
                        <input type="radio" id='@purchase.PurchaseOrderId' name="purchase-select" />
                    </td>
                    <td>@purchase.PurchaseOrderId</td>
                    <td>@purchase.PurchaseOrderTotalPrice</td> 
                    <td>@purchase.PurchaseOrderDate</td>
                    <td>@purchase.OrderStatus</td>
                    <td>@purchase.Supplier.SupplierName</td>
                </tr>
            }
            </tbody>
        </table>
        <!-- Table Pagination -->
        <div class="pagination-container">
            <input type="button" class="btn-lg btn" id="prev" @onclick="PrevPage" value="«" />
                    @for (int i = curPage - 2; i <= curPage + 2; i++)
                    {
                        int j = i;
                        @if (i > 0)
                        {
                            if (i == curPage)
                            {
                                <span class="px-2" style="font-weight:bold; cursor:pointer" @onclick="() => ShowPage(j)">@i</span>
                            }
                            else
                            {
                                <span class="px-2" style="cursor:pointer" @onclick="() => ShowPage(j)">@i</span>
                            }
                        }
                    }
            <input type="button" class="btn-lg btn" id="next" @onclick="NextPage" value="»" />
        </div>
    }
    </div>
</div>

@code {
    private IEnumerable<PurchaseOrderVM>? purchaseOrders;
    private int pageSize = 15;
    private int curPage = 1;

    protected override async Task OnInitializedAsync()
    {
        await ShowPage();
    }

    protected async Task NextPage()
    {
        curPage++;
        await ShowPage();
    }

    protected async Task ShowPage(int page)
    {
        curPage = page;
        await ShowPage();
    }

    protected async Task PrevPage()
    {
        if (curPage > 1)
        {
            curPage--;
            await ShowPage();
        }
    }

    protected async Task ShowPage()
    {
        purchaseOrders = await Http.GetFromJsonAsync<List<PurchaseOrderVM>>($"/Admin/purchases?page={curPage}");
    }

    protected override void OnInitialized()
    {
        currentPage.SetCurrentPageName("Purchases");
        base.OnInitialized();
    }

    void ChangeName() => currentPage.SetCurrentPageName("Name changed");
}